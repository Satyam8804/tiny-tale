{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\satya\\\\OneDrive\\\\Desktop\\\\terribily-tiny-tales\\\\src\\\\Data\\\\Data.js\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useState } from 'react';\nimport './Data.css';\nimport Bar from 'chart.js';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Data = () => {\n  _s();\n  const [data, setData] = useState('');\n  const [wordFrequency, setWordFrequency] = useState({});\n  const [chartData, setChartData] = useState(null);\n  const fetchData = async () => {\n    try {\n      const response = await fetch('https://www.terriblytinytales.com/test.txt');\n      const text = await response.text();\n      setData(text);\n      calculateWordFrequency(text);\n    } catch (error) {\n      console.error('Error fetching data:', error);\n    }\n  };\n  useEffect(() => {\n    if (wordFrequency && Object.keys(wordFrequency).length > 0) {\n      renderChart();\n    }\n  }, [wordFrequency]);\n  useEffect(() => {\n    fetchData();\n  }, []);\n  const calculateWordFrequency = text => {\n    const words = text.split(/\\s+/); // Split the text into an array of words\n    const frequency = {};\n\n    // Count the frequency of each word\n    words.forEach(word => {\n      frequency[word] = (frequency[word] || 0) + 1;\n    });\n    setWordFrequency(frequency);\n  };\n  const renderChart = () => {\n    const sortedWords = Object.entries(wordFrequency).sort((a, b) => b[1] - a[1]);\n    const labels = sortedWords.slice(0, 20).map(_ref => {\n      let [word] = _ref;\n      return word;\n    });\n    const counts = sortedWords.slice(0, 20).map(_ref2 => {\n      let [_, count] = _ref2;\n      return count;\n    });\n    const chartData = {\n      labels,\n      datasets: [{\n        label: 'Word Frequency',\n        data: counts,\n        backgroundColor: 'rgba(75, 192, 192, 0.6)'\n      }]\n    };\n    setChartData(chartData);\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"data\",\n    children: [data, /*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"Word Frequency:\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 65,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"table\", {\n      children: [/*#__PURE__*/_jsxDEV(\"th\", {\n        children: [/*#__PURE__*/_jsxDEV(\"td\", {\n          children: \"Word\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 68,\n          columnNumber: 17\n        }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n          children: \"frequency\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 69,\n          columnNumber: 17\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 67,\n        columnNumber: 13\n      }, this), Object.entries(wordFrequency).map(_ref3 => {\n        let [word, count] = _ref3;\n        return /*#__PURE__*/_jsxDEV(\"tr\", {\n          children: [/*#__PURE__*/_jsxDEV(\"td\", {\n            children: word\n          }, word, false, {\n            fileName: _jsxFileName,\n            lineNumber: 74,\n            columnNumber: 11\n          }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n            children: count\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 77,\n            columnNumber: 11\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 73,\n          columnNumber: 13\n        }, this);\n      })]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 66,\n      columnNumber: 9\n    }, this), chartData && /*#__PURE__*/_jsxDEV(Bar, {\n      data: chartData,\n      options: {\n        responsive: true,\n        maintainAspectRatio: false,\n        scales: {\n          y: {\n            beginAtZero: true,\n            stepSize: 1\n          }\n        }\n      }\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 84,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 63,\n    columnNumber: 5\n  }, this);\n};\n_s(Data, \"oL3fsN3y8emv94hJ5zQuDC8szBg=\");\n_c = Data;\nexport default Data;\nvar _c;\n$RefreshReg$(_c, \"Data\");","map":{"version":3,"names":["React","useEffect","useState","Bar","jsxDEV","_jsxDEV","Data","_s","data","setData","wordFrequency","setWordFrequency","chartData","setChartData","fetchData","response","fetch","text","calculateWordFrequency","error","console","Object","keys","length","renderChart","words","split","frequency","forEach","word","sortedWords","entries","sort","a","b","labels","slice","map","_ref","counts","_ref2","_","count","datasets","label","backgroundColor","className","children","fileName","_jsxFileName","lineNumber","columnNumber","_ref3","options","responsive","maintainAspectRatio","scales","y","beginAtZero","stepSize","_c","$RefreshReg$"],"sources":["C:/Users/satya/OneDrive/Desktop/terribily-tiny-tales/src/Data/Data.js"],"sourcesContent":["import React, { useEffect, useState } from 'react'\r\nimport './Data.css'\r\nimport Bar from 'chart.js';\r\nconst Data = () => {\r\n\r\n    const [data, setData] = useState('')\r\n    const [wordFrequency, setWordFrequency] = useState({});\r\n    const [chartData, setChartData] = useState(null);\r\n\r\n    const fetchData = async()=>{\r\n        try {\r\n            const response = await fetch('https://www.terriblytinytales.com/test.txt');\r\n            const text = await response.text();\r\n            setData(text);\r\n            calculateWordFrequency(text)\r\n          } catch (error) {\r\n            console.error('Error fetching data:', error);\r\n          }\r\n    }\r\n    useEffect(() => {\r\n        if (wordFrequency && Object.keys(wordFrequency).length > 0) {\r\n          renderChart();\r\n        }\r\n      }, [wordFrequency]);\r\n\r\n    useEffect(()=>{\r\n        fetchData()\r\n    },[])\r\n\r\n    const calculateWordFrequency = (text) => {\r\n        const words = text.split(/\\s+/); // Split the text into an array of words\r\n        const frequency = {};\r\n    \r\n        // Count the frequency of each word\r\n        words.forEach((word) => {\r\n          frequency[word] = (frequency[word] || 0) + 1 ;\r\n        });\r\n    \r\n        setWordFrequency(frequency);\r\n      };\r\n\r\n      const renderChart = () => {\r\n        const sortedWords = Object.entries(wordFrequency).sort((a, b) => b[1] - a[1]);\r\n        const labels = sortedWords.slice(0, 20).map(([word]) => word);\r\n        const counts = sortedWords.slice(0, 20).map(([_, count]) => count);\r\n    \r\n        const chartData = {\r\n          labels,\r\n          datasets: [\r\n            {\r\n              label: 'Word Frequency',\r\n              data: counts,\r\n              backgroundColor: 'rgba(75, 192, 192, 0.6)',\r\n            },\r\n          ],\r\n        };\r\n    \r\n        setChartData(chartData);\r\n      };\r\n      \r\n\r\n  return (\r\n    <div className='data'>\r\n        {data}\r\n        <h2>Word Frequency:</h2>\r\n        <table>\r\n            <th>\r\n                <td>Word</td>\r\n                <td>frequency</td>\r\n            </th>\r\n      \r\n        {Object.entries(wordFrequency).map(([word, count]) => (\r\n            <tr>\r\n          <td key={word}>\r\n            {word}\r\n          </td>\r\n          <td>{count}</td>\r\n          </tr>\r\n        ))}\r\n     \r\n      </table>\r\n      \r\n      {chartData && (\r\n        <Bar\r\n          data={chartData}\r\n          options={{\r\n            responsive: true,\r\n            maintainAspectRatio: false,\r\n            scales: {\r\n              y: {\r\n                beginAtZero: true,\r\n                stepSize: 1,\r\n              },\r\n            },\r\n          }}\r\n        />\r\n      )}\r\n      \r\n    </div>\r\n  )\r\n}\r\n\r\nexport default Data"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}