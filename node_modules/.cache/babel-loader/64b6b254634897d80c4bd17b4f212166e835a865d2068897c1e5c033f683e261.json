{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\satya\\\\OneDrive\\\\Desktop\\\\terribily-tiny-tales\\\\src\\\\Data\\\\Data.js\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useState } from 'react';\nimport './Data.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Data = () => {\n  _s();\n  const [data, setData] = useState('');\n  const [wordFrequency, setWordFrequency] = useState({});\n  const fetchData = async () => {\n    try {\n      const response = await fetch('https://www.terriblytinytales.com/test.txt');\n      const text = await response.text();\n      setData(text);\n      calculateWordFrequency(text);\n    } catch (error) {\n      console.error('Error fetching data:', error);\n    }\n  };\n  useEffect(() => {\n    fetchData();\n  }, []);\n  const calculateWordFrequency = text => {\n    const words = text.split(/\\s+/); // Split the text into an array of words\n    const frequency = {};\n\n    // Count the frequency of each word\n    words.forEach(word => {\n      frequency[word] = (frequency[word] || 0) + 1;\n    });\n    setWordFrequency(frequency);\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"data\",\n    children: [data, /*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"Word Frequency:\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 39,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"table\", {\n      children: [/*#__PURE__*/_jsxDEV(\"th\", {\n        children: [/*#__PURE__*/_jsxDEV(\"td\", {\n          children: \"Word\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 42,\n          columnNumber: 17\n        }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n          children: \"frequency\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 43,\n          columnNumber: 17\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 41,\n        columnNumber: 13\n      }, this), Object.entries(wordFrequency).map(_ref => {\n        let [word, count] = _ref;\n        return /*#__PURE__*/_jsxDEV(\"tr\", {\n          children: [/*#__PURE__*/_jsxDEV(\"td\", {\n            children: word\n          }, word, false, {\n            fileName: _jsxFileName,\n            lineNumber: 48,\n            columnNumber: 11\n          }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n            children: count\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 51,\n            columnNumber: 11\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 47,\n          columnNumber: 13\n        }, this);\n      })]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 40,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 37,\n    columnNumber: 5\n  }, this);\n};\n_s(Data, \"PeXxlHjAM/KfoVVRRP66ZN8dRzw=\");\n_c = Data;\nexport default Data;\nvar _c;\n$RefreshReg$(_c, \"Data\");","map":{"version":3,"names":["React","useEffect","useState","jsxDEV","_jsxDEV","Data","_s","data","setData","wordFrequency","setWordFrequency","fetchData","response","fetch","text","calculateWordFrequency","error","console","words","split","frequency","forEach","word","className","children","fileName","_jsxFileName","lineNumber","columnNumber","Object","entries","map","_ref","count","_c","$RefreshReg$"],"sources":["C:/Users/satya/OneDrive/Desktop/terribily-tiny-tales/src/Data/Data.js"],"sourcesContent":["import React, { useEffect, useState } from 'react'\r\nimport './Data.css'\r\nconst Data = () => {\r\n\r\n    const [data, setData] = useState('')\r\n    const [wordFrequency, setWordFrequency] = useState({});\r\n\r\n\r\n    const fetchData = async()=>{\r\n        try {\r\n            const response = await fetch('https://www.terriblytinytales.com/test.txt');\r\n            const text = await response.text();\r\n            setData(text);\r\n            calculateWordFrequency(text)\r\n          } catch (error) {\r\n            console.error('Error fetching data:', error);\r\n          }\r\n    }\r\n\r\n    useEffect(()=>{\r\n        fetchData()\r\n    },[])\r\n\r\n    const calculateWordFrequency = (text) => {\r\n        const words = text.split(/\\s+/); // Split the text into an array of words\r\n        const frequency = {};\r\n    \r\n        // Count the frequency of each word\r\n        words.forEach((word) => {\r\n          frequency[word] = (frequency[word] || 0) + 1 ;\r\n        });\r\n    \r\n        setWordFrequency(frequency);\r\n      };\r\n\r\n  return (\r\n    <div className='data'>\r\n        {data}\r\n        <h2>Word Frequency:</h2>\r\n        <table>\r\n            <th>\r\n                <td>Word</td>\r\n                <td>frequency</td>\r\n            </th>\r\n      \r\n        {Object.entries(wordFrequency).map(([word, count]) => (\r\n            <tr>\r\n          <td key={word}>\r\n            {word}\r\n          </td>\r\n          <td>{count}</td>\r\n          </tr>\r\n        ))}\r\n     \r\n      </table>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default Data"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}