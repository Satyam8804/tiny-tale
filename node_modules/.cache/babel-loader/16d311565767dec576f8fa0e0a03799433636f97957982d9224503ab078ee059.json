{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\satya\\\\OneDrive\\\\Desktop\\\\terribily-tiny-tales\\\\src\\\\Data\\\\Data.js\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useState } from 'react';\nimport './Data.css';\nimport { Bar } from 'react-chartjs-2';\nimport { Chart } from 'chart.js';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Data = () => {\n  _s();\n  const [data, setData] = useState('');\n  const [wordFrequency, setWordFrequency] = useState({});\n  const [chartData, setChartData] = useState(null);\n  const fetchData = async () => {\n    try {\n      const response = await fetch('https://www.terriblytinytales.com/test.txt');\n      const text = await response.text();\n      setData(text);\n      calculateWordFrequency(text);\n    } catch (error) {\n      console.error('Error fetching data:', error);\n    }\n  };\n  useEffect(() => {\n    if (wordFrequency && Object.keys(wordFrequency).length > 0) {\n      renderChart();\n    }\n  }, [wordFrequency]);\n  useEffect(() => {\n    fetchData();\n  }, []);\n  const calculateWordFrequency = text => {\n    const words = text.split(/\\s+/); // Split the text into an array of words\n    const frequency = {};\n\n    // Count the frequency of each word\n    words.forEach(word => {\n      frequency[word] = (frequency[word] || 0) + 1;\n    });\n    setWordFrequency(frequency);\n  };\n  const renderChart = () => {\n    const sortedWords = Object.entries(wordFrequency).sort((a, b) => b[1] - a[1]);\n    const labels = sortedWords.slice(0, 20).map(_ref => {\n      let [word] = _ref;\n      return word;\n    });\n    const counts = sortedWords.slice(0, 20).map(_ref2 => {\n      let [_, count] = _ref2;\n      return count;\n    });\n    const chartData = {\n      labels,\n      datasets: [{\n        label: 'Word Frequency',\n        data: counts,\n        backgroundColor: 'rgba(75, 192, 192, 0.6)'\n      }]\n    };\n    const ctx = document.getElementById('chart');\n    if (ctx) {\n      if (chartData) {\n        if (chartDataInstance) {\n          chartDataInstance.destroy(); // Destroy previous chart instance if exists\n        }\n\n        setChartDataInstance(new Chart(ctx.getContext('2d'), {\n          type: 'bar',\n          data: chartData,\n          options: {\n            responsive: true,\n            maintainAspectRatio: false,\n            scales: {\n              y: {\n                beginAtZero: true,\n                stepSize: 1\n              }\n            }\n          }\n        }));\n      }\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"data\",\n    children: [data, /*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"Word Frequency:\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 91,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"chart-container\",\n      style: {\n        width: '100%',\n        height: '400px'\n      },\n      children: /*#__PURE__*/_jsxDEV(Bar, {\n        data: chartData,\n        options: {\n          responsive: true,\n          maintainAspectRatio: false,\n          scales: {\n            y: {\n              beginAtZero: true,\n              stepSize: 1\n            }\n          }\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 110,\n        columnNumber: 3\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 109,\n      columnNumber: 1\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 89,\n    columnNumber: 5\n  }, this);\n};\n_s(Data, \"oL3fsN3y8emv94hJ5zQuDC8szBg=\");\n_c = Data;\nexport default Data;\nvar _c;\n$RefreshReg$(_c, \"Data\");","map":{"version":3,"names":["React","useEffect","useState","Bar","Chart","jsxDEV","_jsxDEV","Data","_s","data","setData","wordFrequency","setWordFrequency","chartData","setChartData","fetchData","response","fetch","text","calculateWordFrequency","error","console","Object","keys","length","renderChart","words","split","frequency","forEach","word","sortedWords","entries","sort","a","b","labels","slice","map","_ref","counts","_ref2","_","count","datasets","label","backgroundColor","ctx","document","getElementById","chartDataInstance","destroy","setChartDataInstance","getContext","type","options","responsive","maintainAspectRatio","scales","y","beginAtZero","stepSize","className","children","fileName","_jsxFileName","lineNumber","columnNumber","style","width","height","_c","$RefreshReg$"],"sources":["C:/Users/satya/OneDrive/Desktop/terribily-tiny-tales/src/Data/Data.js"],"sourcesContent":["import React, { useEffect, useState } from 'react';\r\nimport './Data.css';\r\nimport {Bar} from 'react-chartjs-2';\r\nimport { Chart } from 'chart.js';\r\n\r\n\r\nconst Data = () => {\r\n  const [data, setData] = useState('');\r\n  const [wordFrequency, setWordFrequency] = useState({});\r\n  const [chartData, setChartData] = useState(null);\r\n\r\n  const fetchData = async () => {\r\n    try {\r\n      const response = await fetch('https://www.terriblytinytales.com/test.txt');\r\n      const text = await response.text();\r\n      setData(text);\r\n      calculateWordFrequency(text);\r\n    } catch (error) {\r\n      console.error('Error fetching data:', error);\r\n    }\r\n  };\r\n\r\n  useEffect(() => {\r\n    if (wordFrequency && Object.keys(wordFrequency).length > 0) {\r\n      renderChart();\r\n    }\r\n  }, [wordFrequency]);\r\n\r\n  useEffect(() => {\r\n    fetchData();\r\n  }, []);\r\n\r\n  const calculateWordFrequency = (text) => {\r\n    const words = text.split(/\\s+/); // Split the text into an array of words\r\n    const frequency = {};\r\n\r\n    // Count the frequency of each word\r\n    words.forEach((word) => {\r\n      frequency[word] = (frequency[word] || 0) + 1;\r\n    });\r\n\r\n    setWordFrequency(frequency);\r\n  };\r\n\r\n  const renderChart = () => {\r\n    const sortedWords = Object.entries(wordFrequency).sort((a, b) => b[1] - a[1]);\r\n    const labels = sortedWords.slice(0, 20).map(([word]) => word);\r\n    const counts = sortedWords.slice(0, 20).map(([_, count]) => count);\r\n  \r\n    const chartData = {\r\n      labels,\r\n      datasets: [\r\n        {\r\n          label: 'Word Frequency',\r\n          data: counts,\r\n          backgroundColor: 'rgba(75, 192, 192, 0.6)',\r\n        },\r\n      ],\r\n    };\r\n  \r\n    const ctx = document.getElementById('chart');\r\n    if (ctx) {\r\n      if (chartData) {\r\n        if (chartDataInstance) {\r\n          chartDataInstance.destroy(); // Destroy previous chart instance if exists\r\n        }\r\n        setChartDataInstance(\r\n          new Chart(ctx.getContext('2d'), {\r\n            type: 'bar',\r\n            data: chartData,\r\n            options: {\r\n              responsive: true,\r\n              maintainAspectRatio: false,\r\n              scales: {\r\n                y: {\r\n                  beginAtZero: true,\r\n                  stepSize: 1,\r\n                },\r\n              },\r\n            },\r\n          })\r\n        );\r\n      }\r\n    }\r\n  };\r\n  \r\n\r\n  return (\r\n    <div className=\"data\">\r\n      {data}\r\n      <h2>Word Frequency:</h2>\r\n      {/* <table>\r\n        <thead>\r\n          <tr>\r\n            <th>Word</th>\r\n            <th>Frequency</th>\r\n          </tr>\r\n        </thead>\r\n        <tbody>\r\n          {Object.entries(wordFrequency).map(([word, count]) => (\r\n            <tr key={word}>\r\n              <td>{word}</td>\r\n              <td>{count}</td>\r\n            </tr>\r\n          ))}\r\n        </tbody>\r\n      </table> */}\r\n\r\n<div className=\"chart-container\" style={{ width: '100%', height: '400px' }}>\r\n  <Bar\r\n    data={chartData}\r\n    options={{\r\n      responsive: true,\r\n      maintainAspectRatio: false,\r\n      scales: {\r\n        y: {\r\n          beginAtZero: true,\r\n          stepSize: 1,\r\n        },\r\n      },\r\n    }}\r\n  />\r\n</div>\r\n\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Data;\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}